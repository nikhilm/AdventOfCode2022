#lang racket
(require advent-of-code)
#;
(define (position-of-four-different-chars str)
  (let loop ([i 0])
    (cond [(= i (string-length str)) #f]
          [(and (not (char=? (string-ref str i) (string-ref str (+ i 1))))
                (not (char=? (string-ref str i) (string-ref str (+ i 2))))
                (not (char=? (string-ref str i) (string-ref str (+ i 3))))
                (not (char=? (string-ref str (+ i 1)) (string-ref str (+ i 2))))
                (not (char=? (string-ref str (+ i 1)) (string-ref str (+ i 3))))
                (not (char=? (string-ref str (+ i 2)) (string-ref str (+ i 3)))))
           i]
          [else (loop (+ i 1))])))

; part 1 was generated by ChatGPT
(define (position-of-four-different-chars str)
  (let loop ([i 0])
    (cond [(= i (- (string-length str) 3)) #f]
          [(and (not (char=? (string-ref str i) (string-ref str (+ i 1))))
                (not (char=? (string-ref str i) (string-ref str (+ i 2))))
                (not (char=? (string-ref str i) (string-ref str (+ i 3))))
                (not (char=? (string-ref str (+ i 1)) (string-ref str (+ i 2))))
                (not (char=? (string-ref str (+ i 1)) (string-ref str (+ i 3))))
                (not (char=? (string-ref str (+ i 2)) (string-ref str (+ i 3)))))
           (+ i 4)]
          [else (loop (+ i 1))])))

(define input (fetch-aoc-input (find-session)
                               2022 6 #:cache #t))

(printf "Part 1: ~v~n" (position-of-four-different-chars input))

; part 2 was harder to convince ChatGPT than it was to just write the answer
(define (all-different? str)
  (= (set-count (list->set (string->list str))) (string-length str)))

(define (part2-n input n)
  (let loop ([i 0])
    (cond [(>= (+ i n) (string-length input)) #f]
          [(all-different? (substring input i (+ i n))) (+ i n)]
          [else (loop (add1 i))])))

(define (part2 input)
  (part2-n input 14))

(printf "Part 2: ~v~n" (part2 input))
